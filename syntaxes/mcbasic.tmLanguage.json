{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "MCBasic",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#types"
		},
		{
			"include": "#namespace"
		},
		{
			"include": "#namespace_function"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#punctuation"
		},
		{
			"include": "#function_declaration"
		},
		{
			"include": "#variable_declaration"
		},
		{
			"include": "#invalid_function"
		},
		{
			"include": "#invalid_variable"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.mcbasic",
					"match": "\\b(func|let|return|if|else)\\b"
				},
				{
					"name": "keyword.operator.mcbasic",
					"match": "\\b(and|or|not|xor)\\b"
				},
				{
					"name": "keyword.operator.mcbasic",
					"match": "\\b(=|!=|<|<=|>|>=)\\b"
				},
				{
					"name": "keyword.operator.mcbasic",
					"match": "\\b(\\+|-|\\*|/)\\b"
				}
			]
		},
		"comments": {
			"name": "comment.line.mcbasic",
			"begin": "#",
			"end": "$"
		},
		"numbers": {
			"name": "constant.numeric.mcbasic",
			"match": "\\b[0-9]+\\b"
		},
		"operators": {
			"name": "keyword.operator.mcbasic",
			"match": "\\b(and|or|not|=|!=|<|<=|>|>=|==|\\+|-|\\*|/)\\b"
		},
		"strings": {
			"name": "string.quoted.double.mcbasic",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.mcbasic",
					"match": "\\\\."
				}
			]
		},
		"types": {
			"name": "storage.type.mcbasic",
			"match": "\\b(int|double|str)\\b"
		},
		"namespace": {
			"name": "support.namespace.mcbasic",
    		"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*(?=:)\\b"
		},
		"namespace_function": {
			"name": "support.function.mcbasic",
			"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*:[a-zA-Z_][a-zA-Z0-9_]*\\b"
		},
		"invalid_variable": {
			"name": "invalid.illegal.mcbasic",
			"patterns": [
				{
					"name": "invalid.illegal.mcbasic",
					"match": "\\b\\d[a-zA-Z0-9_]*\\b"
				}
			]
		},
		"invalid_function": {
			"name": "invalid.illegal.mcbasic",
			"match": "\\b\\d[a-zA-Z0-9_]*\\b(?=\\()"
		},
		"variable_declaration": {
			"patterns": [
				{
					"name": "keyword.declaration.mcbasic",
					"match": "\\blet\\b"
				},
				{
					"name": "variable.other.mcbasic",
					"match": "\\blet\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b",
					"captures": {
						"1": {
						"name": "variable.other.mcbasic"
						}
					}
				},
				{
					"name": "storage.type.mcbasic",
					"match": "\\b(int|double|str)\\b"
				},
				{
					"name": "keyword.operator.assignment.mcbasic",
					"match": "="
				}
			]
		},
		"function_declaration": {
			"patterns": [
				{
					"name": "keyword.declaration.mcbasic",
					"match": "\\bfunc\\b"
				},
				{
					"name": "support.function.mcbasic",
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()",
					"captures": {
						"1": {
							"name": "support.function.mcbasic"
						}
					}
				}
			]
		}
	},
	"scopeName": "source.mcb",
	"fileTypes": [
		"mcb"
	],
	"firstLineMatch": "^\\s*\\b(func|let|return|if|else)\\b",
	"foldingStartMarker": "^\\s*(func|let|return|if|else)\\b",
	"foldingStopMarker": "^\\s*}\\b"
}